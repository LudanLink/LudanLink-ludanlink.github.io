(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{216:function(a,t,r){"use strict";r.r(t);var e=r(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"双亲委派模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模型","aria-hidden":"true"}},[a._v("#")]),a._v(" 双亲委派模型")]),a._v(" "),r("h2",{attrs:{id:"类加载器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类加载器","aria-hidden":"true"}},[a._v("#")]),a._v(" 类加载器")]),a._v(" "),r("h3",{attrs:{id:"类加载器作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类加载器作用","aria-hidden":"true"}},[a._v("#")]),a._v(" 类加载器作用")]),a._v(" "),r("ul",[r("li",[a._v("类加载器用于加载实现类的二进制文件。")]),a._v(" "),r("li",[a._v("类的唯一性判断，jvm中两个类是否相等，必须由同一个类加载器加载的。如果由同一个class文件、同一个虚拟机、不同加载器加载则视为不同类。")])]),a._v(" "),r("h3",{attrs:{id:"类加载器分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类加载器分类","aria-hidden":"true"}},[a._v("#")]),a._v(" 类加载器分类")]),a._v(" "),r("ul",[r("li",[a._v("启动类加载器（Bootstrap ClassLoader），是虚拟机一部分。")]),a._v(" "),r("li",[a._v("其他类加载器，由java实现，独立于虚拟机。\n从开发角度分为三类：")]),a._v(" "),r("li",[a._v("启动类加载器")]),a._v(" "),r("li",[a._v("标准拓展类加载器")]),a._v(" "),r("li",[a._v("应用程序类加载器")])]),a._v(" "),r("h2",{attrs:{id:"双亲委派模型-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模型-2","aria-hidden":"true"}},[a._v("#")]),a._v(" 双亲委派模型")]),a._v(" "),r("p",[a._v("过程：某个特定类加载器在接到加载请求时，将加载任务递归委托给父类加载器加载，如果父类加载器完成加载则然后成功；只有父类加载器无法完成加载任务时才自己去加载。")]),a._v(" "),r("p",[a._v("优势：类加载器存在优先级层次关系，保证类的加载不混乱。")])])}],!1,null,null,null);t.default=s.exports}}]);