(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{222:function(e,r,t){"use strict";t.r(r);var a=t(0),n=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"全局controller异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局controller异常处理","aria-hidden":"true"}},[e._v("#")]),e._v(" 全局Controller异常处理")]),e._v(" "),t("h2",{attrs:{id:"先导"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#先导","aria-hidden":"true"}},[e._v("#")]),e._v(" 先导")]),e._v(" "),t("p",[e._v("通常在service层捕获dao层异常，以回滚数据。\n因此，在controller层就需要捕获service层异常，防止用户查看到内部错误。使用try-catch代码块捕获异常不仅使代码更友好，也在一定程度上提高了安全性。\n然而，每个controller都需要重复的使用try-catch代码块不满足重构原则，显得不那么优雅，而且在维护时也很不方便。因此全局的controller异常捕获就是对controller层重构的一种思路。")]),e._v(" "),t("h2",{attrs:{id:"实现思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现思路","aria-hidden":"true"}},[e._v("#")]),e._v(" 实现思路")]),e._v(" "),t("ol",[t("li",[e._v("创建一个"),t("code",[e._v("GlobalExceptionHandler")]),e._v("类，用来处理全局的异常。")]),e._v(" "),t("li",[e._v("在该类之上，添加"),t("code",[e._v("@ControllerAdvice")]),e._v("注解，且需要确保该类能被扫描到。")]),e._v(" "),t("li",[e._v("除了"),t("code",[e._v("Exception")]),e._v("系统自带的异常，最好还有自定义的异常，例如"),t("code",[e._v("BusinessException")]),e._v("。")]),e._v(" "),t("li",[e._v("创建一个方法，捕获全局异常：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    /**\n     * 处理所有不可知异常\n     * @return\n     */\n    @ExceptionHandler(Exception.class)\n    @ResponseBody\n    MessageDTO handleException(Exception e){\n        log.error("error:", e);\n        return MessageDTO.build().error(500, "internal error");\n    }\n')])])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("创建一个方法捕获已知的特定异常：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    /**\n     * 处理已知特定异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(BusinessException.class)\n    @ResponseBody\n    MessageDTO handleBusinessException(BusinessException e){\n        log.error("error:", e);\n        return MessageDTO.build().error(404, e.getMessage());\n    }\n')])])]),t("ol",{attrs:{start:"6"}},[t("li",[e._v("在controller层就不需要做try-catch捕获异常，所有的controller层的异常都会被"),t("code",[e._v("@ControllerAdvice捕获")]),e._v("。")])]),e._v(" "),t("h2",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),t("p",[e._v("在controller层还经常使用"),t("code",[e._v("validation")]),e._v("做数据的验证，可以搭配使用。直接在格式不匹配时，抛出特定异常，通过"),t("code",[e._v("@ControllerAdvice")]),e._v("捕获后统一输出；或者使用自建的"),t("code",[e._v("BeanValidator")]),e._v("校验后，造错误响应对象返回。")]),e._v(" "),t("h2",{attrs:{id:"代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码","aria-hidden":"true"}},[e._v("#")]),e._v(" 代码")]),e._v(" "),t("p",[e._v("https://github.com/LudanLink/blog-tpl")])])}],!1,null,null,null);r.default=n.exports}}]);