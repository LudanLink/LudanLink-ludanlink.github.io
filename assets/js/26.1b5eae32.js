(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{219:function(a,t,r){"use strict";r.r(t);var e=r(0),i=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"java代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java代理","aria-hidden":"true"}},[a._v("#")]),a._v(" java代理")]),a._v(" "),r("h2",{attrs:{id:"静态代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#静态代理","aria-hidden":"true"}},[a._v("#")]),a._v(" 静态代理")]),a._v(" "),r("p",[a._v("代理简单的说，就是一个对象想实现某一件事情，但是却要通过代理对象来完成这件事情。这个对象与这件事之间不直接联系，代理对象起到了一个中介的作用。")]),a._v(" "),r("h2",{attrs:{id:"代理的好处"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代理的好处","aria-hidden":"true"}},[a._v("#")]),a._v(" 代理的好处")]),a._v(" "),r("ul",[r("li",[a._v("ocp（开闭原则）")]),a._v(" "),r("li",[a._v("能拓展功能，而不侵入原代码。")])]),a._v(" "),r("h2",{attrs:{id:"静态代理的缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#静态代理的缺点","aria-hidden":"true"}},[a._v("#")]),a._v(" 静态代理的缺点")]),a._v(" "),r("ul",[r("li",[a._v("当拓展功能很多时，会导致代理对象的膨胀，且膨胀是无意义的。")])]),a._v(" "),r("h2",{attrs:{id:"动态代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态代理","aria-hidden":"true"}},[a._v("#")]),a._v(" 动态代理")]),a._v(" "),r("p",[a._v("由于静态代理的不灵活和代码的膨胀，我们需要在运行期间动态的来产生代理对象。")]),a._v(" "),r("p",[a._v("动态代理能拓展功能，而不侵入代码，可以可以减少编写代码的工作量，系统拓展性和维护性好。")]),a._v(" "),r("h2",{attrs:{id:"动态代理使用总结（四步走）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态代理使用总结（四步走）","aria-hidden":"true"}},[a._v("#")]),a._v(" 动态代理使用总结（四步走）")]),a._v(" "),r("ol",[r("li",[a._v("通过实现InvacationHandler接口实现自己的动态代理处理器。")]),a._v(" "),r("li",[a._v("在自己的动态代理处理器中重写invoke方法，里面写原业务和拓展业务的代码。")]),a._v(" "),r("li",[a._v("通过反射加载动态代理处理器，通过反射获得接口。")]),a._v(" "),r("li",[a._v("将处理器对象传入Proxy类的getInstance方法中。")])]),a._v(" "),r("h2",{attrs:{id:"动态代理的缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态代理的缺点","aria-hidden":"true"}},[a._v("#")]),a._v(" 动态代理的缺点")]),a._v(" "),r("ul",[r("li",[a._v("代理类必须实现一个接口（个人认为是动态代理最大的缺点，无法摆脱对接口的桎梏）。")]),a._v(" "),r("li",[a._v("由于使用了反射机制，导致速度相对较慢。")])]),a._v(" "),r("h2",{attrs:{id:"拓展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#拓展","aria-hidden":"true"}},[a._v("#")]),a._v(" 拓展")]),a._v(" "),r("p",[a._v("spring的aop实现有两种，一种是jdk的动态代理（通过jdk的提供的InvocationHandler和Proxy\n实现），另一种是cglib的动态代理（通过修改字节码实现代理）")])])}],!1,null,null,null);t.default=i.exports}}]);